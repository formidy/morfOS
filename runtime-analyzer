-- we look and we dont fucking JUDGE. Isolation is broken, some things are broken like blocking robux prompts.

-- ═══════════════════════════════════════════════════════════════════════════════
--                                morefeinnnnnnnnn                   
--                                       hie                      
-- ═══════════════════════════════════════════════════════════════════════════════

local CONFIG = {
    BLOCK_MALICIOUS_SCRIPTS = false,
    MONITOR_DURATION = 1000,
    AUTO_SAVE_LOGS = true,
    ROBUX_STEALER_THRESHOLD = 1,
    DATA_STEALER_THRESHOLD = 3,
    KEYLOGGER_THRESHOLD = 1,
    MONITOR_EXECUTOR_ONLY = true,
    IGNORE_GAME_SCRIPTS = true,
    SHOW_DETECTIONS = true,
    SHOW_ANALYSIS_DETAILS = true,
    MAX_REPORT_ACTIVITIES = 50,
    DEBUG_MODE = false,
    BLOCK_WEBHOOKS = true,
    BLOCK_PURCHASE_PROMPTS = true,
    BLOCK_TELEPORTS = false,
    BLOCK_KEYLOGGERS = true,
    HTTP_SPY_ENABLED = true,
    SHOW_ALL_HTTP_REQUESTS = true
}

local function SafeCall(func, description)
    if not func then 
        warn("[SAFE_CALL] No function provided for: " .. (description or "unknown"))
        return false, "No function provided"
    end
    
    local success, result = pcall(func)
    if not success then
        local errorMsg = "[SAFE_CALL ERROR] " .. (description or "unknown") .. ": " .. tostring(result)
        if CONFIG.DEBUG_MODE then
            warn(errorMsg)
        end
        return false, result
    end
    return true, result
end

local function SafeGetService(serviceName)
    if not serviceName or type(serviceName) ~= "string" then
        warn("[SAFE_GET_SERVICE] Invalid service name: " .. tostring(serviceName))
        return nil
    end
    
    local success, service = SafeCall(function()
        return game:GetService(serviceName)
    end, "Getting service: " .. serviceName)
    
    if not success then
        warn("[SAFE_GET_SERVICE] Failed to get service: " .. serviceName .. " - " .. tostring(service))
        return nil
    end
    
    return service
end

local function debugPrint(message, level)
    if not CONFIG.DEBUG_MODE then return end
    
    level = level or "INFO"
    local timestamp = SafeCall(function() return string.format("%.2f", tick()) end, "Getting timestamp")
    local timeStr = (timestamp and timestamp[2]) and timestamp[2] or "?.??"
    
    print("[DEBUG/" .. level .. "][" .. timeStr .. "s] " .. tostring(message))
end

local function SafeJSONEncode(data)
    local HttpService = SafeGetService("HttpService")
    if not HttpService then
        return tostring(data or "nil")
    end
    
    local success, result = SafeCall(function()
        return HttpService:JSONEncode(data or {})
    end, "JSON encoding")
    
    return success and result or tostring(data or "nil")
end

local ScriptTester = {}
local Players = SafeGetService("Players")
local RunService = SafeGetService("RunService")
local HttpService = SafeGetService("HttpService")
local MarketplaceService = SafeGetService("MarketplaceService")
local TeleportService = SafeGetService("TeleportService")
local UserInputService = SafeGetService("UserInputService")

local LocalPlayer = nil
SafeCall(function()
    if Players then
        LocalPlayer = Players.LocalPlayer
    end
end, "Getting LocalPlayer")

local MonitoringActive = false
local StartTime = 0

local ActivityLog = {}
local MaliciousActivities = {}
local NetworkRequests = {}
local FileOperations = {}
local KeystrokeLog = {}
local ChatInterceptions = {}
local ServiceAccess = {}
local OriginalFunctions = {}
local HookedFunctions = {}
local PurchaseAttempts = {}
local DataCollectionPatterns = {}
local BlockedScripts = {}
local HTTPSpyLog = {}

local function IsExecutorScript()
    if not CONFIG.MONITOR_EXECUTOR_ONLY then
        return true
    end
    
    local success, callingScript = SafeCall(function()
        return getcallingscript and getcallingscript() or nil
    end, "Getting calling script")
    
    if not success or not callingScript then
        debugPrint("Could not determine calling script, assuming executor", "WARN")
        return true
    end
    
    local scriptSource = tostring(callingScript)
    local gameScriptPatterns = {
        "ServerScriptService", "StarterPlayerScripts", "StarterGuiScripts", 
        "ReplicatedFirst", "ReplicatedStorage", "Workspace"
    }
    
    if CONFIG.IGNORE_GAME_SCRIPTS then
        for _, pattern in pairs(gameScriptPatterns) do
            if scriptSource:find(pattern) then
                debugPrint("Ignoring game script: " .. scriptSource, "INFO")
                return false
            end
        end
    end
    
    debugPrint("Monitoring executor script: " .. scriptSource, "INFO")
    return true
end

local function ShouldBlockActivity(activityType, severity)
    if not CONFIG.BLOCK_MALICIOUS_SCRIPTS then
        return false
    end
    
    if activityType:find("WEBHOOK") and CONFIG.BLOCK_WEBHOOKS then
        return true
    elseif activityType:find("PURCHASE") and CONFIG.BLOCK_PURCHASE_PROMPTS then
        return true
    elseif activityType:find("TELEPORT") and CONFIG.BLOCK_TELEPORTS then
        return true
    elseif activityType:find("KEYLOGGER") and CONFIG.BLOCK_KEYLOGGERS then
        return true
    end
    
    return severity >= 9
end

local function LogHTTPRequest(method, url, data, headers, source)
    SafeCall(function()
        if not MonitoringActive or not CONFIG.HTTP_SPY_ENABLED then 
            return 
        end
        
        local success, callingScript = SafeCall(function()
            return getcallingscript and getcallingscript() or "Unknown"
        end, "Getting calling script for HTTP spy")
        
        local scriptStr = success and tostring(callingScript) or "Unknown"
        
        local httpData = {
            method = method,
            url = url,
            data = data,
            headers = headers,
            source = source,
            timestamp = tick() - StartTime,
            script = scriptStr,
            direction = "OUTGOING"
        }
        
        table.insert(HTTPSpyLog, httpData)
        
        if CONFIG.SHOW_ALL_HTTP_REQUESTS then
            local urlStr = tostring(url)
            if #urlStr > 100 then
                urlStr = string.sub(urlStr, 1, 100) .. "..."
            end
            print("[HTTP-SPY] " .. method .. " -> " .. urlStr)
        end
        
        debugPrint("HTTP request logged: " .. method .. " to " .. tostring(url), "INFO")
    end, "HTTP request logging")
end

local function LogActivity(activityType, details, severity)
    SafeCall(function()
        if not MonitoringActive or not IsExecutorScript() then 
            return 
        end
        
        local success, callingScript = SafeCall(function()
            return getcallingscript and getcallingscript() or "Unknown"
        end, "Getting calling script for logging")
        
        local scriptStr = success and tostring(callingScript) or "Unknown"
        
        local activity = {
            type = activityType,
            details = details,
            severity = severity,
            timestamp = tick() - StartTime,
            script = scriptStr,
            stack = SafeCall(function() return debug.traceback() end, "Getting stack trace") and debug.traceback() or "No stack"
        }
        
        table.insert(ActivityLog, activity)
        debugPrint("Activity logged: " .. activityType .. " (severity: " .. severity .. ")", "INFO")
    end, "Activity logging")
end

local function AddMaliciousActivity(activityType, data, severity)
    SafeCall(function()
        if not MonitoringActive or not IsExecutorScript() then 
            return 
        end
        
        local success, callingScript = SafeCall(function()
            return getcallingscript and getcallingscript() or "Unknown"
        end, "Getting calling script for malicious activity")
        
        local scriptStr = success and tostring(callingScript) or "Unknown"
        
        local activity = {
            type = activityType,
            data = data,
            severity = severity,
            timestamp = tick() - StartTime,
            script = scriptStr,
            stack = SafeCall(function() return debug.traceback() end, "Getting stack trace") and debug.traceback() or "No stack"
        }
        
        table.insert(MaliciousActivities, activity)
        
        if CONFIG.SHOW_DETECTIONS then
            local jsonData = SafeJSONEncode(data or {})
            warn("[DETECTION] " .. activityType .. ": " .. jsonData)
        end
        
        debugPrint("Malicious activity detected: " .. activityType .. " (severity: " .. severity .. ")", "WARN")
        
        if ShouldBlockActivity(activityType, severity) then
            local scriptId = scriptStr
            if not BlockedScripts[scriptId] then
                BlockedScripts[scriptId] = {
                    script = callingScript,
                    reason = activityType,
                    timestamp = tick() - StartTime
                }
                warn("[BLOCKED] Script blocked due to: " .. activityType)
                debugPrint("Script blocked: " .. scriptId, "ERROR")
            end
            error("Script execution blocked due to malicious activity: " .. activityType)
        end
    end, "Malicious activity processing")
end

local function SetupGameServiceHooks()
    SafeCall(function()
        if not getrawmetatable or not setrawmetatable or not newcclosure or not getnamecallmethod then
            warn("Missing required functions for game service hooks")
            return
        end
        
        local gameMetatable = SafeCall(function() return getrawmetatable(game) end, "Getting game metatable")
        if not gameMetatable then 
            debugPrint("Could not get game metatable", "ERROR")
            return 
        end
        
        local originalNamecall = gameMetatable.__namecall
        if not originalNamecall then 
            debugPrint("No __namecall found in game metatable", "ERROR")
            return 
        end
        
        local newMetatable = {}
        SafeCall(function()
            for k, v in pairs(gameMetatable) do
                newMetatable[k] = v
            end
        end, "Copying game metatable")
        
        newMetatable.__namecall = newcclosure(function(self, ...)
            local success, method = SafeCall(function() return getnamecallmethod() end, "Getting namecall method")
            if not success then
                return originalNamecall(self, ...)
            end
            
            local args = {...}
            
            if IsExecutorScript() then
                SafeCall(function()
                    if method == "GetService" then
                        local serviceName = args[1]
                        LogActivity("SERVICE_ACCESS", "Accessing: " .. tostring(serviceName), 2)
                        
                        table.insert(ServiceAccess, {
                            service = serviceName,
                            timestamp = tick() - StartTime,
                            script = tostring(SafeCall(function() return getcallingscript() end) and getcallingscript() or "Unknown")
                        })
                        
                        if serviceName == "MarketplaceService" then
                            AddMaliciousActivity("MARKETPLACE_SERVICE_ACCESS", {service = serviceName}, 4)
                        end
                    elseif method == "HttpGet" then
                        local url = args[1]
                        LogActivity("LEGACY_HTTP_GET", "URL: " .. tostring(url), 5)
                        LogHTTPRequest("LEGACY_GET", url, nil, nil, "game.HttpGet")
                        
                        table.insert(NetworkRequests, {
                            method = "Legacy_HttpGet",
                            url = url,
                            timestamp = tick() - StartTime,
                            script = tostring(SafeCall(function() return getcallingscript() end) and getcallingscript() or "Unknown"),
                            args = args
                        })
                        
                        AnalyzeNetworkRequest("Legacy_HttpGet", url, nil)
                    elseif method == "HttpPost" then
                        local url = args[1]
                        local data = args[2]
                        LogActivity("LEGACY_HTTP_POST", "URL: " .. tostring(url), 6)
                        LogHTTPRequest("LEGACY_POST", url, data, nil, "game.HttpPost")
                        
                        table.insert(NetworkRequests, {
                            method = "Legacy_HttpPost",
                            url = url,
                            data = data,
                            timestamp = tick() - StartTime,
                            script = tostring(SafeCall(function() return getcallingscript() end) and getcallingscript() or "Unknown"),
                            args = args
                        })
                        
                        AnalyzeNetworkRequest("Legacy_HttpPost", url, data)
                    end
                end, "Game service hook processing")
            end
            
            return originalNamecall(self, ...)
        end)
        
        SafeCall(function()
            setrawmetatable(game, newMetatable)
            table.insert(HookedFunctions, {type = "game_namecall", original = originalNamecall})
            debugPrint("Game service hooks installed", "INFO")
        end, "Setting game metatable")
    end, "Game service hooks setup")
end

local function SetupHttpServiceHooks()
    SafeCall(function()
        if not HttpService then 
            debugPrint("HttpService not available", "WARN")
            return 
        end
        
        local httpMetatable = SafeCall(function() return getrawmetatable(HttpService) end, "Getting HttpService metatable")
        if not httpMetatable then 
            debugPrint("Could not get HttpService metatable", "ERROR")
            return 
        end
        
        local originalNamecall = httpMetatable.__namecall
        if not originalNamecall then 
            debugPrint("No __namecall found in HttpService metatable", "ERROR")
            return 
        end
        
        local newMetatable = {}
        SafeCall(function()
            for k, v in pairs(httpMetatable) do
                newMetatable[k] = v
            end
        end, "Copying HttpService metatable")
        
        newMetatable.__namecall = newcclosure(function(self, ...)
            local success, method = SafeCall(function() return getnamecallmethod() end, "Getting namecall method")
            if not success then
                return originalNamecall(self, ...)
            end
            
            local args = {...}
            
            if IsExecutorScript() then
                SafeCall(function()
                    if method == "PostAsync" then
                        local url = args[1]
                        local data = args[2]
                        local headers = args[3]
                        LogActivity("HTTP_POST", "URL: " .. tostring(url), 4)
                        LogHTTPRequest("POST", url, data, headers, "HttpService.PostAsync")
                        
                        table.insert(NetworkRequests, {
                            method = "PostAsync",
                            url = url,
                            data = data,
                            headers = headers,
                            timestamp = tick() - StartTime,
                            script = tostring(SafeCall(function() return getcallingscript() end) and getcallingscript() or "Unknown"),
                            args = args
                        })
                        
                        AnalyzeNetworkRequest("PostAsync", url, data)
                    elseif method == "GetAsync" then
                        local url = args[1]
                        local headers = args[2]
                        LogActivity("HTTP_GET", "URL: " .. tostring(url), 3)
                        LogHTTPRequest("GET", url, nil, headers, "HttpService.GetAsync")
                        
                        table.insert(NetworkRequests, {
                            method = "GetAsync",
                            url = url,
                            headers = headers,
                            timestamp = tick() - StartTime,
                            script = tostring(SafeCall(function() return getcallingscript() end) and getcallingscript() or "Unknown"),
                            args = args
                        })
                        
                        AnalyzeNetworkRequest("GetAsync", url, nil)
                    elseif method == "RequestAsync" then
                        local requestData = args[1]
                        local url = requestData and (requestData.Url or requestData.url) or "Unknown"
                        local reqMethod = requestData and (requestData.Method or requestData.method) or "Unknown"
                        local headers = requestData and (requestData.Headers or requestData.headers) or {}
                        local body = requestData and (requestData.Body or requestData.body) or nil
                        
                        LogActivity("HTTP_REQUEST", reqMethod .. " -> " .. tostring(url), 4)
                        LogHTTPRequest(reqMethod, url, body, headers, "HttpService.RequestAsync")
                        
                        table.insert(NetworkRequests, {
                            method = "RequestAsync_" .. reqMethod,
                            url = url,
                            data = requestData,
                            timestamp = tick() - StartTime,
                            script = tostring(SafeCall(function() return getcallingscript() end) and getcallingscript() or "Unknown"),
                            args = args
                        })
                        
                        AnalyzeNetworkRequest("RequestAsync", url, body)
                    elseif method == "JSONEncode" then
                        LogActivity("JSON_ENCODE", "Data encoding", 1)
                    elseif method == "JSONDecode" then
                        LogActivity("JSON_DECODE", "Data decoding", 1)
                    end
                end, "HTTP service hook processing")
            end
            
            return originalNamecall(self, ...)
        end)
        
        SafeCall(function()
            setrawmetatable(HttpService, newMetatable)
            table.insert(HookedFunctions, {type = "httpservice_namecall", original = originalNamecall})
            debugPrint("HTTP service hooks installed", "INFO")
        end, "Setting HttpService metatable")
    end, "HTTP service hooks setup")
end

local function SetupMarketplaceHooks()
    SafeCall(function()
        if not MarketplaceService then 
            debugPrint("MarketplaceService not available", "WARN")
            return 
        end
        
        local marketMetatable = SafeCall(function() return getrawmetatable(MarketplaceService) end, "Getting MarketplaceService metatable")
        if not marketMetatable then 
            debugPrint("Could not get MarketplaceService metatable", "ERROR")
            return 
        end
        
        local originalNamecall = marketMetatable.__namecall
        if not originalNamecall then 
            debugPrint("No __namecall found in MarketplaceService metatable", "ERROR")
            return 
        end
        
        local newMetatable = {}
        SafeCall(function()
            for k, v in pairs(marketMetatable) do
                newMetatable[k] = v
            end
        end, "Copying MarketplaceService metatable")
        
        newMetatable.__namecall = newcclosure(function(self, ...)
            local success, method = SafeCall(function() return getnamecallmethod() end, "Getting namecall method")
            if not success then
                return originalNamecall(self, ...)
            end
            
            local args = {...}
            
            if IsExecutorScript() then
                SafeCall(function()
                    if method == "PromptPurchase" then
                        local player = args[1]
                        local assetId = args[2]
                        
                        table.insert(PurchaseAttempts, {
                            type = "Asset",
                            player = tostring(player),
                            id = assetId,
                            timestamp = tick() - StartTime
                        })
                        
                        AddMaliciousActivity("ASSET_PURCHASE_PROMPT", {
                            player = tostring(player),
                            assetId = assetId,
                            method = "PromptPurchase"
                        }, 9)
                        
                        LogActivity("ROBUX_PROMPT", "Player: " .. tostring(player) .. " Asset: " .. tostring(assetId), 10)
                    elseif method == "PromptProductPurchase" then
                        local player = args[1]
                        local productId = args[2]
                        
                        table.insert(PurchaseAttempts, {
                            type = "Product",
                            player = tostring(player),
                            id = productId,
                            timestamp = tick() - StartTime
                        })
                        
                        AddMaliciousActivity("PRODUCT_PURCHASE_PROMPT", {
                            player = tostring(player),
                            productId = productId,
                            method = "PromptProductPurchase"
                        }, 10)
                        
                        LogActivity("PRODUCT_PROMPT", "Player: " .. tostring(player) .. " Product: " .. tostring(productId), 10)
                    elseif method == "PromptGamePassPurchase" then
                        local player = args[1]
                        local gamePassId = args[2]
                        
                        table.insert(PurchaseAttempts, {
                            type = "GamePass",
                            player = tostring(player),
                            id = gamePassId,
                            timestamp = tick() - StartTime
                        })
                        
                        AddMaliciousActivity("GAMEPASS_PURCHASE_PROMPT", {
                            player = tostring(player),
                            gamePassId = gamePassId,
                            method = "PromptGamePassPurchase"
                        }, 9)
                        
                        LogActivity("GAMEPASS_PROMPT", "Player: " .. tostring(player) .. " GamePass: " .. tostring(gamePassId), 9)
                    end
                end, "Marketplace hook processing")
            end
            
            return originalNamecall(self, ...)
        end)
        
        SafeCall(function()
            setrawmetatable(MarketplaceService, newMetatable)
            table.insert(HookedFunctions, {type = "marketplace_namecall", original = originalNamecall})
            debugPrint("Marketplace hooks installed", "INFO")
        end, "Setting MarketplaceService metatable")
    end, "Marketplace hooks setup")
end

local function SetupTeleportHooks()
    SafeCall(function()
        if not TeleportService then 
            debugPrint("TeleportService not available", "WARN")
            return 
        end
        
        local teleportMetatable = SafeCall(function() return getrawmetatable(TeleportService) end, "Getting TeleportService metatable")
        if not teleportMetatable then 
            debugPrint("Could not get TeleportService metatable", "ERROR")
            return 
        end
        
        local originalNamecall = teleportMetatable.__namecall
        if not originalNamecall then 
            debugPrint("No __namecall found in TeleportService metatable", "ERROR")
            return 
        end
        
        local newMetatable = {}
        SafeCall(function()
            for k, v in pairs(teleportMetatable) do
                newMetatable[k] = v
            end
        end, "Copying TeleportService metatable")
        
        newMetatable.__namecall = newcclosure(function(self, ...)
            local success, method = SafeCall(function() return getnamecallmethod() end, "Getting namecall method")
            if not success then
                return originalNamecall(self, ...)
            end
            
            local args = {...}
            
            if IsExecutorScript() and method:find("Teleport") then
                SafeCall(function()
                    AddMaliciousActivity("FORCED_TELEPORT", {
                        method = method,
                        args = args,
                        argCount = #args
                    }, 8)
                    
                    LogActivity("TELEPORT", method .. " called with " .. #args .. " arguments", 8)
                end, "Teleport hook processing")
            end
            
            return originalNamecall(self, ...)
        end)
        
        SafeCall(function()
            setrawmetatable(TeleportService, newMetatable)
            table.insert(HookedFunctions, {type = "teleport_namecall", original = originalNamecall})
            debugPrint("Teleport hooks installed", "INFO")
        end, "Setting TeleportService metatable")
    end, "Teleport hooks setup")
end

local function SetupUserInputHooks()
    SafeCall(function()
        if not UserInputService then 
            debugPrint("UserInputService not available", "WARN")
            return 
        end
        
        local uisMetatable = SafeCall(function() return getrawmetatable(UserInputService) end, "Getting UserInputService metatable")
        if not uisMetatable then 
            debugPrint("Could not get UserInputService metatable", "ERROR")
            return 
        end
        
        local originalIndex = uisMetatable.__index
        if not originalIndex then 
            debugPrint("No __index found in UserInputService metatable", "ERROR")
            return 
        end
        
        local newMetatable = {}
        SafeCall(function()
            for k, v in pairs(uisMetatable) do
                newMetatable[k] = v
            end
        end, "Copying UserInputService metatable")
        
        newMetatable.__index = newcclosure(function(self, key)
            if IsExecutorScript() then
                SafeCall(function()
                    if key == "InputBegan" then
                        AddMaliciousActivity("KEYLOGGER_SETUP", {event = "InputBegan"}, 8)
                        LogActivity("KEYSTROKE_MONITOR", "InputBegan event accessed", 8)
                        
                        local originalEvent = originalIndex(self, key)
                        if originalEvent and originalEvent.Connect then
                            local originalConnect = originalEvent.Connect
                            
                            originalEvent.Connect = function(self, callback)
                                AddMaliciousActivity("KEYLOGGER_ACTIVE", {}, 9)
                                LogActivity("KEYSTROKE_LOGGER", "InputBegan callback connected", 9)
                                
                                local wrappedCallback = function(input, processed)
                                    SafeCall(function()
                                        if MonitoringActive then
                                            table.insert(KeystrokeLog, {
                                                keyCode = tostring(input.KeyCode),
                                                userInputType = tostring(input.UserInputType),
                                                processed = processed,
                                                timestamp = tick() - StartTime,
                                                script = tostring(SafeCall(function() return getcallingscript() end) and getcallingscript() or "Unknown")
                                            })
                                            
                                            if input.UserInputType == Enum.UserInputType.Keyboard then
                                                AddMaliciousActivity("KEYSTROKE_LOGGED", {
                                                    key = tostring(input.KeyCode),
                                                    processed = processed
                                                }, 7)
                                            end
                                        end
                                    end, "Keystroke logging")
                                    return callback(input, processed)
                                end
                                
                                return originalConnect(originalEvent, wrappedCallback)
                            end
                        end
                        
                        return originalEvent
                    elseif key == "InputChanged" then
                        AddMaliciousActivity("INPUT_CHANGE_MONITORING", {event = "InputChanged"}, 6)
                        LogActivity("INPUT_MONITOR", "InputChanged event accessed", 6)
                    end
                end, "UserInput hook processing")
            end
            
            return originalIndex(self, key)
        end)
        
        SafeCall(function()
            setrawmetatable(UserInputService, newMetatable)
            table.insert(HookedFunctions, {type = "userinput_index", original = originalIndex})
            debugPrint("UserInput hooks installed", "INFO")
        end, "Setting UserInputService metatable")
    end, "UserInput hooks setup")
end

local function SetupFileSystemHooks()
    SafeCall(function()
        if writefile then
            SafeCall(function()
                OriginalFunctions.writefile = writefile
                if getgenv then
                    getgenv().writefile = function(filename, content)
                        if IsExecutorScript() then
                            SafeCall(function()
                                LogActivity("FILE_WRITE", "Writing to: " .. filename, 3)
                                
                                table.insert(FileOperations, {
                                    operation = "WRITE",
                                    filename = filename,
                                    size = #tostring(content),
                                    timestamp = tick() - StartTime,
                                    script = tostring(SafeCall(function() return getcallingscript() end) and getcallingscript() or "Unknown")
                                })
                                
                                AnalyzeFileOperation("WRITE", filename, content)
                            end, "File write logging")
                        end
                        return OriginalFunctions.writefile(filename, content)
                    end
                end
            end, "Setting up writefile hook")
        end
        
        if readfile then
            SafeCall(function()
                OriginalFunctions.readfile = readfile
                if getgenv then
                    getgenv().readfile = function(filename)
                        if IsExecutorScript() then
                            SafeCall(function()
                                LogActivity("FILE_READ", "Reading: " .. filename, 2)
                                
                                table.insert(FileOperations, {
                                    operation = "READ",
                                    filename = filename,
                                    timestamp = tick() - StartTime,
                                    script = tostring(SafeCall(function() return getcallingscript() end) and getcallingscript() or "Unknown")
                                })
                                
                                AnalyzeFileOperation("READ", filename, nil)
                            end, "File read logging")
                        end
                        return OriginalFunctions.readfile(filename)
                    end
                end
            end, "Setting up readfile hook")
        end
        
        if appendfile then
            SafeCall(function()
                OriginalFunctions.appendfile = appendfile
                if getgenv then
                    getgenv().appendfile = function(filename, content)
                        if IsExecutorScript() then
                            SafeCall(function()
                                LogActivity("FILE_APPEND", "Appending to: " .. filename, 3)
                                
                                table.insert(FileOperations, {
                                    operation = "APPEND",
                                    filename = filename,
                                    size = #tostring(content),
                                    timestamp = tick() - StartTime,
                                    script = tostring(SafeCall(function() return getcallingscript() end) and getcallingscript() or "Unknown")
                                })
                                
                                AnalyzeFileOperation("APPEND", filename, content)
                            end, "File append logging")
                        end
                        return OriginalFunctions.appendfile(filename, content)
                    end
                end
            end, "Setting up appendfile hook")
        end
        
        if makefolder then
            SafeCall(function()
                OriginalFunctions.makefolder = makefolder
                if getgenv then
                    getgenv().makefolder = function(foldername)
                        if IsExecutorScript() then
                            SafeCall(function()
                                LogActivity("FOLDER_CREATE", "Creating folder: " .. foldername, 2)
                                
                                table.insert(FileOperations, {
                                    operation = "CREATE_FOLDER",
                                    filename = foldername,
                                    timestamp = tick() - StartTime,
                                    script = tostring(SafeCall(function() return getcallingscript() end) and getcallingscript() or "Unknown")
                                })
                            end, "Folder creation logging")
                        end
                        return OriginalFunctions.makefolder(foldername)
                    end
                end
            end, "Setting up makefolder hook")
        end
        
        debugPrint("File system hooks installed", "INFO")
    end, "File system hooks setup")
end

local function SetupRequestHooks()
    SafeCall(function()
        if request then
            SafeCall(function()
                OriginalFunctions.request = request
                if getgenv then
                    getgenv().request = function(requestData)
                        if IsExecutorScript() then
                            local url = "Unknown"
                            local method = "GET"
                            local headers = {}
                            local body = nil
                            
                            SafeCall(function()
                                url = requestData.Url or requestData.url or "Unknown"
                                method = requestData.Method or requestData.method or "GET"
                                headers = requestData.Headers or requestData.headers or {}
                                body = requestData.Body or requestData.body
                                
                                LogActivity("REQUEST_FUNCTION", method .. " -> " .. tostring(url), 4)
                                LogHTTPRequest(method, url, body, headers, "request()")
                                
                                table.insert(NetworkRequests, {
                                    method = "request_" .. method,
                                    url = url,
                                    data = requestData,
                                    timestamp = tick() - StartTime,
                                    script = tostring(SafeCall(function() return getcallingscript() end) and getcallingscript() or "Unknown")
                                })
                                
                                AnalyzeNetworkRequest("request", url, body)
                            end, "Request function logging")
                        end
                        return OriginalFunctions.request(requestData)
                    end
                end
            end, "Setting up request hook")
        end
        
        if http_request then
            SafeCall(function()
                OriginalFunctions.http_request = http_request
                if getgenv then
                    getgenv().http_request = function(requestData)
                        if IsExecutorScript() then
                            local url = "Unknown"
                            local method = "GET"
                            local headers = {}
                            local body = nil
                            
                            SafeCall(function()
                                url = requestData.Url or requestData.url or "Unknown"
                                method = requestData.Method or requestData.method or "GET"
                                headers = requestData.Headers or requestData.headers or {}
                                body = requestData.Body or requestData.body
                                
                                LogActivity("HTTP_REQUEST_FUNCTION", method .. " -> " .. tostring(url), 4)
                                LogHTTPRequest(method, url, body, headers, "http_request()")
                                
                                table.insert(NetworkRequests, {
                                    method = "http_request_" .. method,
                                    url = url,
                                    data = requestData,
                                    timestamp = tick() - StartTime,
                                    script = tostring(SafeCall(function() return getcallingscript() end) and getcallingscript() or "Unknown")
                                })
                                
                                AnalyzeNetworkRequest("http_request", url, body)
                            end, "HTTP request function logging")
                        end
                        return OriginalFunctions.http_request(requestData)
                    end
                end
            end, "Setting up http_request hook")
        end
        
        if syn and syn.request then
            SafeCall(function()
                OriginalFunctions.syn_request = syn.request
                syn.request = function(requestData)
                    if IsExecutorScript() then
                        local url = "Unknown"
                        local method = "GET"
                        local headers = {}
                        local body = nil
                        
                        SafeCall(function()
                            url = requestData.Url or requestData.url or "Unknown"
                            method = requestData.Method or requestData.method or "GET"
                            headers = requestData.Headers or requestData.headers or {}
                            body = requestData.Body or requestData.body
                            
                            LogActivity("SYN_REQUEST", method .. " -> " .. tostring(url), 4)
                            LogHTTPRequest(method, url, body, headers, "syn.request()")
                            
                            table.insert(NetworkRequests, {
                                method = "syn_request_" .. method,
                                url = url,
                                data = requestData,
                                timestamp = tick() - StartTime,
                                script = tostring(SafeCall(function() return getcallingscript() end) and getcallingscript() or "Unknown")
                            })
                            
                            AnalyzeNetworkRequest("syn_request", url, body)
                        end, "Syn request logging")
                    end
                    return OriginalFunctions.syn_request(requestData)
                end
            end, "Setting up syn.request hook")
        end
        
        debugPrint("Request hooks installed", "INFO")
    end, "Request hooks setup")
end

local function SetupEnvironmentHooks()
    SafeCall(function()
        if getgenv then
            SafeCall(function()
                OriginalFunctions.getgenv = getgenv
                getgenv().getgenv = function()
                    if IsExecutorScript() then
                        SafeCall(function()
                            AddMaliciousActivity("EXECUTOR_ENV_ACCESS", {}, 5)
                            LogActivity("ENVIRONMENT_ACCESS", "getgenv() called", 5)
                        end, "getgenv logging")
                    end
                    return OriginalFunctions.getgenv()
                end
            end, "Setting up getgenv hook")
        end
        
        if getrenv then
            SafeCall(function()
                OriginalFunctions.getrenv = getrenv
                if getgenv then
                    getgenv().getrenv = function()
                        if IsExecutorScript() then
                            SafeCall(function()
                                AddMaliciousActivity("REAL_ENV_ACCESS", {}, 6)
                                LogActivity("ENVIRONMENT_ACCESS", "getrenv() called", 6)
                            end, "getrenv logging")
                        end
                        return OriginalFunctions.getrenv()
                    end
                end
            end, "Setting up getrenv hook")
        end
        
        if getrawmetatable then
            SafeCall(function()
                OriginalFunctions.getrawmetatable = getrawmetatable
                if getgenv then
                    getgenv().getrawmetatable = function(obj)
                        if IsExecutorScript() then
                            SafeCall(function()
                                AddMaliciousActivity("METATABLE_ACCESS", {object = tostring(obj)}, 6)
                                LogActivity("METATABLE_ACCESS", "getrawmetatable called on: " .. tostring(obj), 6)
                            end, "getrawmetatable logging")
                        end
                        return OriginalFunctions.getrawmetatable(obj)
                    end
                end
            end, "Setting up getrawmetatable hook")
        end
        
        if setrawmetatable then
            SafeCall(function()
                OriginalFunctions.setrawmetatable = setrawmetatable
                if getgenv then
                    getgenv().setrawmetatable = function(obj, metatable)
                        if IsExecutorScript() then
                            SafeCall(function()
                                AddMaliciousActivity("METATABLE_MODIFICATION", {object = tostring(obj)}, 7)
                                LogActivity("METATABLE_MODIFY", "setrawmetatable called on: " .. tostring(obj), 7)
                            end, "setrawmetatable logging")
                        end
                        return OriginalFunctions.setrawmetatable(obj, metatable)
                    end
                end
            end, "Setting up setrawmetatable hook")
        end
        
        debugPrint("Environment hooks installed", "INFO")
    end, "Environment hooks setup")
end

local function SetupChatMonitoring()
    SafeCall(function()
        if not LocalPlayer then
            debugPrint("LocalPlayer not available for chat monitoring", "WARN")
            return
        end
        
        SafeCall(function()
            LocalPlayer.Chatted:Connect(function(message)
                SafeCall(function()
                    if message:lower() == "stop" then
                        MonitoringActive = false
                        print("MONITORING STOPPED BY USER COMMAND")
                        return
                    end
                    
                    table.insert(ChatInterceptions, {
                        player = tostring(LocalPlayer),
                        message = message,
                        timestamp = tick() - StartTime
                    })
                    
                    AnalyzeChatMessage(LocalPlayer, message)
                end, "Processing LocalPlayer chat")
            end)
        end, "Setting up LocalPlayer chat monitoring")
        
        SafeCall(function()
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Chatted then
                    SafeCall(function()
                        player.Chatted:Connect(function(message)
                            SafeCall(function()
                                table.insert(ChatInterceptions, {
                                    player = tostring(player),
                                    message = message,
                                    timestamp = tick() - StartTime
                                })
                                
                                AnalyzeChatMessage(player, message)
                            end, "Processing player chat: " .. tostring(player))
                        end)
                    end, "Setting up chat monitoring for: " .. tostring(player))
                end
            end
        end, "Setting up existing players chat monitoring")
        
        SafeCall(function()
            Players.PlayerAdded:Connect(function(player)
                SafeCall(function()
                    if player ~= LocalPlayer and player.Chatted then
                        player.Chatted:Connect(function(message)
                            SafeCall(function()
                                table.insert(ChatInterceptions, {
                                    player = tostring(player),
                                    message = message,
                                    timestamp = tick() - StartTime
                                })
                                
                                AnalyzeChatMessage(player, message)
                            end, "Processing new player chat: " .. tostring(player))
                        end)
                    end
                end, "Setting up new player chat monitoring: " .. tostring(player))
            end)
        end, "Setting up PlayerAdded chat monitoring")
        
        debugPrint("Chat monitoring installed", "INFO")
    end, "Chat monitoring setup")
end

function AnalyzeNetworkRequest(method, url, data)
    SafeCall(function()
        local urlStr = tostring(url):lower()
        
        local webhookPatterns = {
            "discord%.com/api/webhooks/",
            "discordapp%.com/api/webhooks/",
            "canary%.discord%.com/api/webhooks/",
            "ptb%.discord%.com/api/webhooks/"
        }
        
        for _, pattern in pairs(webhookPatterns) do
            if string.match(urlStr, pattern) then
                table.insert(DataCollectionPatterns, {
                    type = "webhook_transmission",
                    url = url,
                    data = data,
                    timestamp = tick() - StartTime
                })
                
                AddMaliciousActivity("WEBHOOK_DATA_TRANSMISSION", {
                    method = method,
                    url = url,
                    webhook_type = "DISCORD"
                }, 9)
            end
        end
        
        local suspiciousServices = {
            "paste%.ee", "pastebin%.com", "hastebin%.com", "0x0%.st", "file%.io",
            "anonfiles%.com", "mega%.nz", "t%.me", "api%.telegram%.org"
        }
        
        for _, pattern in pairs(suspiciousServices) do
            if string.match(urlStr, pattern) then
                AddMaliciousActivity("EXTERNAL_DATA_UPLOAD", {
                    method = method,
                    url = url,
                    service = pattern
                }, 7)
            end
        end
        
        if data and method:upper() == "POST" then
            AnalyzeDataTransmission(url, data)
        end
    end, "Network request analysis")
end

function AnalyzeDataTransmission(url, data)
    SafeCall(function()
        local dataStr = tostring(data)
        local patterns = 0
        
        local playerDataPatterns = {
            "userid", "username", "displayname", "accountage", "premium", "robux",
            "placeid", "jobid", "hwid", "fingerprint", "ip", "country"
        }
        
        for _, pattern in pairs(playerDataPatterns) do
            if dataStr:lower():find(pattern) then
                patterns = patterns + 1
            end
        end
        
        if patterns >= CONFIG.DATA_STEALER_THRESHOLD then
            AddMaliciousActivity("PLAYER_DATA_HARVESTING", {
                url = url,
                patterns_matched = patterns,
                data_length = #dataStr
            }, 8)
        end
        
        if dataStr:find("game:GetService") or dataStr:find("Players:GetPlayers") then
            AddMaliciousActivity("GAME_DATA_EXTRACTION", {
                url = url,
                contains_game_methods = true
            }, 7)
        end
    end, "Data transmission analysis")
end

function AnalyzeFileOperation(operation, filename, content)
    SafeCall(function()
        local filenameStr = tostring(filename):lower()
        
        if filenameStr:find("config") or filenameStr:find("data") or filenameStr:find("log") then
            if content and tostring(content):find("username") or tostring(content):find("userid") then
                AddMaliciousActivity("PERSONAL_DATA_STORAGE", {
                    operation = operation,
                    filename = filename
                }, 6)
            end
        end
        
        if operation == "WRITE" and content then
            local contentStr = tostring(content):lower()
            if contentStr:find("userid") and contentStr:find("username") and contentStr:find("robux") then
                AddMaliciousActivity("ACCOUNT_INFO_LOGGING", {
                    filename = filename,
                    operation = operation
                }, 8)
            end
        end
    end, "File operation analysis")
end

function AnalyzeChatMessage(player, message)
    SafeCall(function()
        local messageStr = tostring(message):lower()
        
        local phishingKeywords = {
            "free robux", "robux generator", "click here", "visit", "www.", "http", "discord.gg"
        }
        
        for _, keyword in pairs(phishingKeywords) do
            if messageStr:find(keyword) then
                AddMaliciousActivity("PHISHING_ATTEMPT", {
                    player = tostring(player),
                    message = message,
                    keyword = keyword
                }, 6)
                break
            end
        end
    end, "Chat message analysis")
end

local function DetectRobuxStealerBehavior()
    SafeCall(function()
        if #PurchaseAttempts > CONFIG.ROBUX_STEALER_THRESHOLD then
            for i = 1, #PurchaseAttempts - 1 do
                local current = PurchaseAttempts[i]
                local next = PurchaseAttempts[i + 1]
                
                if next.timestamp - current.timestamp < 2 then
                    AddMaliciousActivity("RAPID_PURCHASE_PROMPTS", {
                        first_id = current.id,
                        second_id = next.id,
                        time_difference = next.timestamp - current.timestamp
                    }, 9)
                end
            end
        end
    end, "Robux stealer behavior detection")
end

local function DetectDataStealerBehavior()
    SafeCall(function()
        local webhookRequests = 0
        local playerDataAccess = 0
        
        for _, request in pairs(NetworkRequests) do
            if tostring(request.url):lower():find("webhook") then
                webhookRequests = webhookRequests + 1
            end
        end
        
        for _, activity in pairs(ActivityLog) do
            if activity.type:find("PLAYER") or activity.type:find("USER") then
                playerDataAccess = playerDataAccess + 1
            end
        end
        
        if webhookRequests > 0 and playerDataAccess > CONFIG.DATA_STEALER_THRESHOLD then
            AddMaliciousActivity("DATA_STEALER_PATTERN", {
                webhook_requests = webhookRequests,
                data_access_attempts = playerDataAccess
            }, 9)
        end
    end, "Data stealer behavior detection")
end

local function CalculateRiskScore()
    SafeCall(function()
        DetectRobuxStealerBehavior()
        DetectDataStealerBehavior()
    end, "Running behavior detection")
    
    local score = 0
    local maxSeverity = 0
    local robuxStealerCount = 0
    local dataStealerCount = 0
    local keyloggerCount = 0
    local webhookCount = 0
    
    SafeCall(function()
        for _, activity in pairs(MaliciousActivities) do
            score = score + activity.severity
            maxSeverity = math.max(maxSeverity, activity.severity)
            
            if activity.type:find("PURCHASE") or activity.type:find("ROBUX") then
                robuxStealerCount = robuxStealerCount + 1
            elseif activity.type:find("DATA") or activity.type:find("HARVEST") then
                dataStealerCount = dataStealerCount + 1
            elseif activity.type:find("KEYSTROKE") or activity.type:find("KEYLOGGER") then
                keyloggerCount = keyloggerCount + 1
            elseif activity.type:find("WEBHOOK") then
                webhookCount = webhookCount + 1
            end
        end
    end, "Calculating risk scores")
    
    local safetyScore = math.max(0, 100 - score)
    
    return {
        total_risk = score,
        safety_score = safetyScore,
        max_severity = maxSeverity,
        activity_count = #MaliciousActivities,
        robux_stealer_activities = robuxStealerCount,
        data_stealer_activities = dataStealerCount,
        keylogger_activities = keyloggerCount,
        webhook_activities = webhookCount,
        network_requests = #NetworkRequests,
        file_operations = #FileOperations,
        keystrokes_logged = #KeystrokeLog,
        blocked_scripts = #BlockedScripts,
        http_spy_requests = #HTTPSpyLog
    }
end

local function SortMaliciousByRisk(activities)
    SafeCall(function()
        table.sort(activities, function(a, b)
            if a.severity == b.severity then
                return a.timestamp < b.timestamp
            end
            return a.severity > b.severity
        end)
    end, "Sorting activities by risk")
    return activities
end

local function SaveLogsToFile(riskScore)
    if not CONFIG.AUTO_SAVE_LOGS then return end
    
    SafeCall(function()
        local timestamp = SafeCall(function() return os.date("%Y%m%d_%H%M%S") end, "Getting timestamp") and os.date("%Y%m%d_%H%M%S") or "unknown"
        local filename = "runtime_security_" .. timestamp .. ".log"
        
        local logContent = "═══════════════════════════════════════════════════════════════════════════════\n"
        logContent = logContent .. "                      MORFEIN'S RUNTIME ANALYZER v2.1\n"
        logContent = logContent .. "═══════════════════════════════════════════════════════════════════════════════\n\n"
        logContent = logContent .. "CONFIGURATION:\n"
        logContent = logContent .. "─────────────────────────────────────────────────────────────────────────────\n"
        logContent = logContent .. "Block Malicious Scripts : " .. tostring(CONFIG.BLOCK_MALICIOUS_SCRIPTS) .. "\n"
        logContent = logContent .. "Monitor Executor Only   : " .. tostring(CONFIG.MONITOR_EXECUTOR_ONLY) .. "\n"
        logContent = logContent .. "Ignore Game Scripts     : " .. tostring(CONFIG.IGNORE_GAME_SCRIPTS) .. "\n"
        logContent = logContent .. "HTTP Spy Enabled        : " .. tostring(CONFIG.HTTP_SPY_ENABLED) .. "\n"
        logContent = logContent .. "Show All HTTP Requests  : " .. tostring(CONFIG.SHOW_ALL_HTTP_REQUESTS) .. "\n\n"
        
        logContent = logContent .. "MONITORING SUMMARY:\n"
        logContent = logContent .. "─────────────────────────────────────────────────────────────────────────────\n"
        logContent = logContent .. "Monitoring Duration     : " .. string.format("%.2f", tick() - StartTime) .. " seconds\n"
        logContent = logContent .. "Risk Score              : " .. riskScore.total_risk .. "\n"
        logContent = logContent .. "Safety Score            : " .. riskScore.safety_score .. "/100\n"
        logContent = logContent .. "Max Severity            : " .. riskScore.max_severity .. "/10\n"
        logContent = logContent .. "Malicious Activities    : " .. riskScore.activity_count .. "\n"
        logContent = logContent .. "Robux Stealer Signs     : " .. riskScore.robux_stealer_activities .. "\n"
        logContent = logContent .. "Data Stealer Signs      : " .. riskScore.data_stealer_activities .. "\n"
        logContent = logContent .. "Keylogger Signs         : " .. riskScore.keylogger_activities .. "\n"
        logContent = logContent .. "Webhook Activities      : " .. riskScore.webhook_activities .. "\n"
        logContent = logContent .. "Network Requests        : " .. riskScore.network_requests .. "\n"
        logContent = logContent .. "HTTP Spy Requests       : " .. riskScore.http_spy_requests .. "\n"
        logContent = logContent .. "File Operations         : " .. riskScore.file_operations .. "\n"
        logContent = logContent .. "Keystrokes Captured     : " .. riskScore.keystrokes_logged .. "\n"
        logContent = logContent .. "Blocked Scripts         : " .. riskScore.blocked_scripts .. "\n\n"
        
        logContent = logContent .. "HTTP SPY LOG (ALL REQUESTS):\n"
        logContent = logContent .. "─────────────────────────────────────────────────────────────────────────────\n"
        for i, httpReq in pairs(HTTPSpyLog) do
            logContent = logContent .. string.format("[%05.1fs] [%s] %s -> %s\n",
                httpReq.timestamp, httpReq.direction, httpReq.method, httpReq.url)
            logContent = logContent .. "  Source: " .. (httpReq.source or "Unknown") .. "\n"
            logContent = logContent .. "  Script: " .. (httpReq.script or "Unknown") .. "\n"
            if httpReq.headers and next(httpReq.headers) then
                logContent = logContent .. "  Headers: " .. SafeJSONEncode(httpReq.headers) .. "\n"
            end
            if httpReq.data then
                local dataStr = tostring(httpReq.data)
                if #dataStr > 200 then
                    dataStr = string.sub(dataStr, 1, 200) .. "... [TRUNCATED]"
                end
                logContent = logContent .. "  Data: " .. dataStr .. "\n"
            end
            logContent = logContent .. "\n"
        end
        
        logContent = logContent .. "TOP " .. CONFIG.MAX_REPORT_ACTIVITIES .. " MALICIOUS ACTIVITIES:\n"
        logContent = logContent .. "─────────────────────────────────────────────────────────────────────────────\n"
        local sortedActivities = SortMaliciousByRisk(MaliciousActivities)
        for i = 1, math.min(CONFIG.MAX_REPORT_ACTIVITIES, #sortedActivities) do
            local activity = sortedActivities[i]
            logContent = logContent .. string.format("[%02d] [SEV:%02d] [%05.1fs] %s\n",
                i, activity.severity, activity.timestamp, activity.type)
            logContent = logContent .. "     Script: " .. (activity.script or "Unknown") .. "\n"
            logContent = logContent .. "     Data: " .. SafeJSONEncode(activity.data or {}) .. "\n\n"
        end
        
        if CONFIG.BLOCK_MALICIOUS_SCRIPTS and next(BlockedScripts) then
            logContent = logContent .. "BLOCKED SCRIPTS:\n"
            logContent = logContent .. "─────────────────────────────────────────────────────────────────────────────\n"
            for scriptId, blockData in pairs(BlockedScripts) do
                logContent = logContent .. string.format("[%05.1fs] %s - Reason: %s\n",
                    blockData.timestamp, scriptId, blockData.reason)
            end
            logContent = logContent .. "\n"
        end
        
        logContent = logContent .. "NETWORK REQUESTS:\n"
        logContent = logContent .. "─────────────────────────────────────────────────────────────────────────────\n"
        for i, request in pairs(NetworkRequests) do
            logContent = logContent .. string.format("[%05.1fs] %s -> %s\n",
                request.timestamp, request.method, request.url)
            logContent = logContent .. "  Script: " .. (request.script or "Unknown") .. "\n\n"
        end
        
        if writefile and OriginalFunctions.writefile then
            OriginalFunctions.writefile(filename, logContent)
            print("Log file saved: " .. filename)
        end
    end, "Log file saving")
end

function ScriptTester:StartMonitoring()
    SafeCall(function()
        print("\n")
        print("╔══════════════════════════════════════════════════════════════════════════════╗")
        print("║                               RUNTIME ANALYZER v2.1                         ║")
        print("║                              morefein was here                              ║")
        print("╚══════════════════════════════════════════════════════════════════════════════╝")
        print("")
        print("CONFIGURATION:")
        print("  Block Malicious Scripts: " .. tostring(CONFIG.BLOCK_MALICIOUS_SCRIPTS))
        print("  Monitor Executor Only: " .. tostring(CONFIG.MONITOR_EXECUTOR_ONLY))
        print("  Show Detections: " .. tostring(CONFIG.SHOW_DETECTIONS))
        print("  HTTP Spy Enabled: " .. tostring(CONFIG.HTTP_SPY_ENABLED))
        print("  Show All HTTP Requests: " .. tostring(CONFIG.SHOW_ALL_HTTP_REQUESTS))
        print("  Debug Mode: " .. tostring(CONFIG.DEBUG_MODE))
        print("")
        print("┌─ INITIALIZING HOOKS ─────────────────────────────────────────────────────────┐")
        print("│ Setting up monitoring systems...")
        print("└──────────────────────────────────────────────────────────────────────────────┘")
        
        ActivityLog = {}
        MaliciousActivities = {}
        NetworkRequests = {}
        FileOperations = {}
        KeystrokeLog = {}
        ChatInterceptions = {}
        ServiceAccess = {}
        OriginalFunctions = {}
        HookedFunctions = {}
        PurchaseAttempts = {}
        DataCollectionPatterns = {}
        BlockedScripts = {}
        HTTPSpyLog = {}
        
        MonitoringActive = true
        StartTime = tick()
        
        debugPrint("Starting hook installation", "INFO")
        
        SetupGameServiceHooks()
        SetupHttpServiceHooks()
        SetupMarketplaceHooks()
        SetupTeleportHooks()
        SetupUserInputHooks()
        SetupFileSystemHooks()
        SetupRequestHooks()
        SetupEnvironmentHooks()
        SetupChatMonitoring()
        
        print("")
        print("┌─ MONITORING ACTIVE ──────────────────────────────────────────────────────────┐")
        print("│ ✅ All hooks installed successfully")
        print("│ 🟢 Runtime monitoring active")
        print("│ 🌐 HTTP Spy monitoring active")
        if CONFIG.BLOCK_MALICIOUS_SCRIPTS then
            print("│ 🔴 Malicious scripts will be BLOCKED")
        else
            print("│ 🟡 Malicious scripts will be LOGGED ONLY")
        end
        print("│ Execute your test script now")
        print("│ Type 'stop' in chat to end monitoring")
        print("│ Maximum duration: " .. CONFIG.MONITOR_DURATION .. " seconds")
        print("└──────────────────────────────────────────────────────────────────────────────┘")
        
        spawn(function()
            SafeCall(function()
                while MonitoringActive and (tick() - StartTime) < CONFIG.MONITOR_DURATION do
                    wait(1)
                end
                
                if MonitoringActive then
                    MonitoringActive = false
                    debugPrint("Monitoring timeout reached", "INFO")
                    print("Monitoring timeout reached")
                end
                
                local riskScore = CalculateRiskScore()
                
                if CONFIG.SHOW_ANALYSIS_DETAILS then
                    print("")
                    print("╔══════════════════════════════════════════════════════════════════════════════╗")
                    print("║                              ANALYSIS RESULTS                               ║")
                    print("╚══════════════════════════════════════════════════════════════════════════════╝")
                    print("")
                    print("SUMMARY:")
                    print("  Duration: " .. string.format("%.2f", tick() - StartTime) .. "s")
                    print("  Risk Score: " .. riskScore.total_risk)
                    print("  Safety Score: " .. riskScore.safety_score .. "/100")
                    print("  Blocked Scripts: " .. riskScore.blocked_scripts)
                    print("  HTTP Requests Monitored: " .. riskScore.http_spy_requests)
                    print("")
                    print("DETECTIONS:")
                    print("  Robux Stealers: " .. riskScore.robux_stealer_activities)
                    print("  Data Stealers: " .. riskScore.data_stealer_activities)
                    print("  Keyloggers: " .. riskScore.keylogger_activities)
                    print("  Webhooks: " .. riskScore.webhook_activities)
                    print("")
                    
                    local verdict = ""
                    local verdictIcon = ""
                    
                    if riskScore.robux_stealer_activities > CONFIG.ROBUX_STEALER_THRESHOLD then
                        verdict = "ROBUX STEALER DETECTED"
                        verdictIcon = "🔴"
                    elseif riskScore.data_stealer_activities > 1 or riskScore.webhook_activities > 0 then
                        verdict = "DATA STEALER DETECTED"
                        verdictIcon = "🔴"
                    elseif riskScore.keylogger_activities > CONFIG.KEYLOGGER_THRESHOLD then
                        verdict = "KEYLOGGER DETECTED"
                        verdictIcon = "🔴"
                    elseif riskScore.safety_score >= 90 then
                        verdict = "SAFE"
                        verdictIcon = "✅"
                    elseif riskScore.safety_score >= 70 then
                        verdict = "LOW RISK"
                        verdictIcon = "🟢"
                    else
                        verdict = "MODERATE RISK"
                        verdictIcon = "⚠️"
                    end
                    
                    print("VERDICT: " .. verdictIcon .. " " .. verdict)
                    print("")
                    
                    if #HTTPSpyLog > 0 then
                        print("HTTP SPY - TOP 10 REQUESTS:")
                        for i = 1, math.min(10, #HTTPSpyLog) do
                            local req = HTTPSpyLog[i]
                            local urlDisplay = req.url
                            if #urlDisplay > 80 then
                                urlDisplay = string.sub(urlDisplay, 1, 80) .. "..."
                            end
                            print(string.format("  [%d] %s -> %s", i, req.method, urlDisplay))
                        end
                        print("")
                    end
                    
                    if #MaliciousActivities > 0 then
                        print("TOP DETECTIONS:")
                        local sortedActivities = SortMaliciousByRisk(MaliciousActivities)
                        for i = 1, math.min(10, #sortedActivities) do
                            local activity = sortedActivities[i]
                            print(string.format("  [%d] %s (severity: %d)",
                                i, activity.type, activity.severity))
                        end
                    end
                end
                
                SaveLogsToFile(riskScore)
                
                print("")
                print("Monitoring complete!")
                debugPrint("Analysis complete", "INFO")
            end, "Main monitoring loop")
        end)
    end, "Starting monitoring")
end

SafeCall(function()
    ScriptTester:StartMonitoring()
end, "Main script execution")
